{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\liron\\\\Desktop\\\\FullStack\\\\Training\\\\todo_list_training\\\\ToDo_List_testing\\\\Client\\\\src\\\\Cmps\\\\ToDoList\\\\ToDoListCmp.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport initial_data from \"../../initialData\";\nimport Column_cmp from \"./Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\nimport ToolBar from \"./ToolBar\";\nimport Requests from \"../../Functions/Requests\";\nimport ColumnCmp from \"./ColumnCmp\";\nexport default function ToDoListCmp() {\n  _s();\n\n  const [state, setState] = useState(initial_data);\n  const [tasks_list, setTasksList] = useState();\n  let data_user = JSON.parse(localStorage.getItem(\"data_user\"));\n  const user_id = data_user[\"user_id\"];\n  const user_name = data_user[\"user_name\"];\n  useEffect(() => {\n    async function tasks_list_useEffect() {\n      Requests.get_task_list(user_id).then(res => {\n        setTasksList(res.data.tasks_list);\n      });\n    }\n\n    tasks_list_useEffect();\n  }, []);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    console.log('result', result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId == source.droppableId && destination.index == source.index) {\n      return;\n    }\n\n    const start = source.droppableId;\n    const finish = destination.droppableId;\n    console.log('start', source.droppableId, 'finish', destination.droppableId);\n\n    if (start === finish) {\n      console.log('result', result); // console.log('', );\n      // const newTaskId = Array.from(start.taskIds);\n      // newTaskId.splice(source.index, 1);\n      // newTaskId.splice(destination.index, 0, draggableId);\n      // const newColumn = {\n      //   ...start,\n      //   taskIds: newTaskId,\n    }\n\n    ; //   const newState = {\n    //     ...state,\n    //     columns: {\n    //       ...state.columns,\n    //       [newColumn.id]: newColumn,\n    //     },\n    //   };\n    //   setState(newState);\n    //   return;\n    // }\n    // const startTaskIds = Array.from(start.taskIds);\n    // startTaskIds.splice(source.index, 1);\n    // const newStart = {\n    //   ...start,\n    //   taskIds: startTaskIds,\n    // };\n    // const finshTaskIds = Array.from(finish.taskIds);\n    // finshTaskIds.splice(destination.index, 0, draggableId);\n    // const newFinsh = {\n    //   ...finish,\n    //   taskIds: finshTaskIds,\n    // };\n    // const newState = {\n    //   ...state,\n    //   columns: {\n    //     ...state.columns,\n    //     [newStart.id]: newStart,\n    //     [newFinsh.id]: newFinsh,\n    //   },\n    // };\n    // setState(newState);\n    // return;\n  };\n\n  let data_cmp = [{\n    title: \"TODO\",\n    status: \"todo\",\n    class_name: \"todo_column\"\n  }, {\n    title: \"IN PROGERESS\",\n    status: \"in_pragress\",\n    class_name: \"in_pragress_column\"\n  }, {\n    title: \"DONE\",\n    status: \"done\",\n    class_name: \"done_column\"\n  }];\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(ToolBar, {\n      user_name: user_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pro\",\n      children: data_cmp.map((data_column, index) => /*#__PURE__*/_jsxDEV(ColumnCmp, {\n        class_name: data_column.class_name,\n        title: data_column.title,\n        number: index,\n        tasks_list: tasks_list ? tasks_list.filter(task => task.status === data_column.status) : \"\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToDoListCmp, \"lCKKRILlebV5Ag56CRt6kLAA4cA=\");\n\n_c = ToDoListCmp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListCmp\");","map":{"version":3,"sources":["C:/Users/liron/Desktop/FullStack/Training/todo_list_training/ToDo_List_testing/Client/src/Cmps/ToDoList/ToDoListCmp.jsx"],"names":["React","initial_data","Column_cmp","DragDropContext","useState","useEffect","ToolBar","Requests","ColumnCmp","ToDoListCmp","state","setState","tasks_list","setTasksList","data_user","JSON","parse","localStorage","getItem","user_id","user_name","tasks_list_useEffect","get_task_list","then","res","data","onDragEnd","result","destination","source","draggableId","console","log","droppableId","index","start","finish","data_cmp","title","status","class_name","map","data_column","filter","task"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport initial_data from \"../../initialData\";\r\nimport Column_cmp from \"./Column_cmp\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ToolBar from \"./ToolBar\";\r\nimport Requests from \"../../Functions/Requests\";\r\nimport ColumnCmp from \"./ColumnCmp\";\r\n\r\nexport default function ToDoListCmp() {\r\n  const [state, setState] = useState(initial_data);\r\n  const [tasks_list, setTasksList] = useState();\r\n\r\n  let data_user = JSON.parse(localStorage.getItem(\"data_user\"));\r\n  const user_id = data_user[\"user_id\"];\r\n  const user_name = data_user[\"user_name\"];\r\n\r\n  useEffect(() => {\r\n    async function tasks_list_useEffect() {\r\n      Requests.get_task_list(user_id).then((res) => {\r\n        setTasksList(res.data.tasks_list);\r\n      });\r\n    }\r\n    tasks_list_useEffect();\r\n  }, []);\r\n\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n    console.log('result',result);\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId == source.droppableId &&\r\n      destination.index == source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = source.droppableId\r\n    const finish = destination.droppableId\r\n    console.log('start' ,source.droppableId, 'finish',destination.droppableId );\r\n\r\n    if (start === finish) {\r\n      console.log('result',result);\r\n      // console.log('', );\r\n      // const newTaskId = Array.from(start.taskIds);\r\n\r\n      // newTaskId.splice(source.index, 1);\r\n      // newTaskId.splice(destination.index, 0, draggableId);\r\n\r\n      // const newColumn = {\r\n      //   ...start,\r\n      //   taskIds: newTaskId,\r\n      };\r\n\r\n    //   const newState = {\r\n    //     ...state,\r\n    //     columns: {\r\n    //       ...state.columns,\r\n    //       [newColumn.id]: newColumn,\r\n    //     },\r\n    //   };\r\n    //   setState(newState);\r\n    //   return;\r\n    // }\r\n\r\n\r\n\r\n\r\n    // const startTaskIds = Array.from(start.taskIds);\r\n    // startTaskIds.splice(source.index, 1);\r\n    // const newStart = {\r\n    //   ...start,\r\n    //   taskIds: startTaskIds,\r\n    // };\r\n\r\n    // const finshTaskIds = Array.from(finish.taskIds);\r\n    // finshTaskIds.splice(destination.index, 0, draggableId);\r\n    // const newFinsh = {\r\n    //   ...finish,\r\n    //   taskIds: finshTaskIds,\r\n    // };\r\n\r\n    // const newState = {\r\n    //   ...state,\r\n    //   columns: {\r\n    //     ...state.columns,\r\n    //     [newStart.id]: newStart,\r\n    //     [newFinsh.id]: newFinsh,\r\n    //   },\r\n    // };\r\n    // setState(newState);\r\n    // return;\r\n  };\r\n\r\n  let data_cmp = [\r\n    { title: \"TODO\", status: \"todo\", class_name: \"todo_column\" },\r\n    {\r\n      title: \"IN PROGERESS\",\r\n      status: \"in_pragress\",\r\n      class_name: \"in_pragress_column\",\r\n    },\r\n    { title: \"DONE\", status: \"done\", class_name: \"done_column\" },\r\n  ];\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <ToolBar user_name={user_name} />\r\n      {/* <div className=\"testing1\">\r\n        {state.columnOder.map((column_id) => {\r\n          const column = state.columns[column_id],\r\n            tasks = column.taskIds.map((task_id) => state.tasks[task_id]);\r\n          return <Column_cmp key={column.id} column={column} tasks={tasks} />;\r\n        })}\r\n      </div> */}\r\n      <div className=\"pro\">\r\n        {data_cmp.map((data_column, index) => (\r\n          <ColumnCmp\r\n            class_name={data_column.class_name}\r\n            title={data_column.title}\r\n            key={index}\r\n            number={index}\r\n            tasks_list={\r\n              tasks_list\r\n                ? tasks_list.filter(\r\n                    (task) => task.status === data_column.status\r\n                  )\r\n                : \"\"\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}