{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\liron\\\\Desktop\\\\FullStack\\\\Training\\\\todo_list_training\\\\ToDo_List_testing\\\\Client\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initial_data from \"./initialData\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Column_cmp from \"./Cmps/Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\nimport ToolBar from \"./Cmps/ToolBar\";\nexport default function App() {\n  _s();\n\n  const [state, setState] = useState(initial_data);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n      const newColumn = { ...start,\n        taskIds: newTaskId\n      };\n      const newState = { ...state,\n        columns: { ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = { ...start,\n      taskIds: startTaskIds\n    };\n    const finshTaskIds = Array.from(finish.taskIds);\n    finshTaskIds.splice(destination.index, 0, draggableId);\n    const newFinsh = { ...finish,\n      taskIds: finshTaskIds\n    };\n    const newState = { ...state,\n      columns: { ...state.columns,\n        [newStart.id]: newStart,\n        [newFinsh.id]: newFinsh\n      }\n    };\n    setState(newState);\n    return;\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(ToolBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), state.columnOder.map(column_id => {\n      const column = state.columns[column_id],\n            tasks = column.taskIds.map(task_id => state.tasks[task_id]);\n      return /*#__PURE__*/_jsxDEV(Column_cmp, {\n        column: column,\n        tasks: tasks\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 12\n  }, this);\n}\n\n_s(App, \"+tQpU5W5jB5ZY5fACYON9mhd8w8=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 90,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/liron/Desktop/FullStack/Training/todo_list_training/ToDo_List_testing/Client/src/index.js"],"names":["React","ReactDOM","initial_data","reportWebVitals","Column_cmp","DragDropContext","useState","useEffect","ToolBar","App","state","setState","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskId","Array","from","taskIds","splice","newColumn","newState","id","startTaskIds","newStart","finshTaskIds","newFinsh","columnOder","map","column_id","column","tasks","task_id","render","document","getElementById"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACJ,YAAD,CAAlC;;AAEA,QAAMU,SAAS,GAAIC,MAAD,IAAY;AAC5B,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,QAAuCH,MAA7C;;AAEA,QAAI,CAACC,WAAL,EAAkB;AAChB;AACD;;AAED,QACEA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAF/B,EAGE;AACA;AACD;;AAED,UAAMC,KAAK,GAAGT,KAAK,CAACU,OAAN,CAAcL,MAAM,CAACE,WAArB,CAAd;AACA,UAAMI,MAAM,GAAGX,KAAK,CAACU,OAAN,CAAcN,WAAW,CAACG,WAA1B,CAAf;;AAEA,QAAIE,KAAK,KAAKE,MAAd,EAAsB;AACpB,YAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,OAAjB,CAAlB;AAEAH,MAAAA,SAAS,CAACI,MAAV,CAAiBX,MAAM,CAACG,KAAxB,EAA+B,CAA/B;AACAI,MAAAA,SAAS,CAACI,MAAV,CAAiBZ,WAAW,CAACI,KAA7B,EAAoC,CAApC,EAAuCF,WAAvC;AAEA,YAAMW,SAAS,GAAG,EAChB,GAAGR,KADa;AAEhBM,QAAAA,OAAO,EAAEH;AAFO,OAAlB;AAKA,YAAMM,QAAQ,GAAG,EACf,GAAGlB,KADY;AAEfU,QAAAA,OAAO,EAAE,EACP,GAAGV,KAAK,CAACU,OADF;AAEP,WAACO,SAAS,CAACE,EAAX,GAAgBF;AAFT;AAFM,OAAjB;AAOAhB,MAAAA,QAAQ,CAACiB,QAAD,CAAR;AACA;AACD;;AAED,UAAME,YAAY,GAAGP,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,OAAjB,CAArB;AACAK,IAAAA,YAAY,CAACJ,MAAb,CAAoBX,MAAM,CAACG,KAA3B,EAAkC,CAAlC;AACA,UAAMa,QAAQ,GAAG,EACf,GAAGZ,KADY;AAEfM,MAAAA,OAAO,EAAEK;AAFM,KAAjB;AAKA,UAAME,YAAY,GAAGT,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,OAAlB,CAArB;AACAO,IAAAA,YAAY,CAACN,MAAb,CAAoBZ,WAAW,CAACI,KAAhC,EAAuC,CAAvC,EAA0CF,WAA1C;AACA,UAAMiB,QAAQ,GAAG,EACf,GAAGZ,MADY;AAEfI,MAAAA,OAAO,EAAEO;AAFM,KAAjB;AAKA,UAAMJ,QAAQ,GAAG,EACf,GAAGlB,KADY;AAEfU,MAAAA,OAAO,EAAE,EACP,GAAGV,KAAK,CAACU,OADF;AAEP,SAACW,QAAQ,CAACF,EAAV,GAAeE,QAFR;AAGP,SAACE,QAAQ,CAACJ,EAAV,GAAeI;AAHR;AAFM,KAAjB;AAQAtB,IAAAA,QAAQ,CAACiB,QAAD,CAAR;AACA;AACD,GA/DD;;AAiEA,sBAAS,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEhB,SAA5B;AAAA,4BACP,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADO,EAENF,KAAK,CAACwB,UAAN,CAAiBC,GAAjB,CAAsBC,SAAD,IAAe;AACnC,YAAMC,MAAM,GAAG3B,KAAK,CAACU,OAAN,CAAcgB,SAAd,CAAf;AAAA,YACEE,KAAK,GAAGD,MAAM,CAACZ,OAAP,CAAeU,GAAf,CAAoBI,OAAD,IAAa7B,KAAK,CAAC4B,KAAN,CAAYC,OAAZ,CAAhC,CADV;AAEA,0BAAO,QAAC,UAAD;AAA4B,QAAA,MAAM,EAAEF,MAApC;AAA4C,QAAA,KAAK,EAAEC;AAAnD,SAAiBD,MAAM,CAACR,EAAxB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAJA,CAFM;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAQD;;GA5EuBpB,G;;KAAAA,G;AA8ExBR,QAAQ,CAACuC,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initial_data from \"./initialData\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Column_cmp from \"./Cmps/Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\nimport ToolBar from \"./Cmps/ToolBar\";\n\nexport default function App() {\n  const [state, setState] = useState(initial_data);\n  \n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskId,\n      };\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n      setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finshTaskIds = Array.from(finish.taskIds);\n    finshTaskIds.splice(destination.index, 0, draggableId);\n    const newFinsh = {\n      ...finish,\n      taskIds: finshTaskIds,\n    };\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newStart.id]: newStart,\n        [newFinsh.id]: newFinsh,\n      },\n    };\n    setState(newState);\n    return;\n  };\n\n  return ( <DragDropContext onDragEnd={onDragEnd}>\n    <ToolBar/>\n    {state.columnOder.map((column_id) => {\n      const column = state.columns[column_id],\n        tasks = column.taskIds.map((task_id) => state.tasks[task_id]);\n      return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n    })}\n  </DragDropContext>)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n"]},"metadata":{},"sourceType":"module"}