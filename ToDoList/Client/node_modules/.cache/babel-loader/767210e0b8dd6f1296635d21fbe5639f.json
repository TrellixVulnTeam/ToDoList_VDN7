{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\liron\\\\Desktop\\\\FullStack\\\\Training\\\\todo_list_training\\\\ToDo_List_testing\\\\Client\\\\src\\\\Cmps\\\\ToDoList\\\\ToDoListCmp.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport initial_data from \"../../initialData\";\nimport Column_cmp from \"./Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\nimport ToolBar from \"./ToolBar\";\nimport Requests from \"../../Functions/Requests\";\nexport default function ToDoListCmp() {\n  _s();\n\n  const [state, setState] = useState(initial_data);\n  const [tasks_list, setTasksList] = useState();\n  let data_user = JSON.parse(localStorage.getItem(\"data_user\"));\n  const user_id = data_user[\"user_id\"];\n  const user_name = data_user[\"user_name\"];\n  useEffect(() => {\n    async function tasks_list_useEffect() {\n      Requests.get_task_list(user_id).then(res => {\n        setTasksList(res.data.tasks_list);\n      });\n    }\n\n    tasks_list_useEffect();\n  }, []);\n  console.log(tasks_list);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n      const newColumn = { ...start,\n        taskIds: newTaskId\n      };\n      const newState = { ...state,\n        columns: { ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = { ...start,\n      taskIds: startTaskIds\n    };\n    const finshTaskIds = Array.from(finish.taskIds);\n    finshTaskIds.splice(destination.index, 0, draggableId);\n    const newFinsh = { ...finish,\n      taskIds: finshTaskIds\n    };\n    const newState = { ...state,\n      columns: { ...state.columns,\n        [newStart.id]: newStart,\n        [newFinsh.id]: newFinsh\n      }\n    };\n    setState(newState);\n    return;\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(ToolBar, {\n      user_name: user_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), state.columnOder.map(column_id => {\n      const column = state.columns[column_id],\n            tasks = column.taskIds.map(task_id => state.tasks[task_id]);\n      return /*#__PURE__*/_jsxDEV(Column_cmp, {\n        column: column,\n        tasks: tasks\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToDoListCmp, \"lCKKRILlebV5Ag56CRt6kLAA4cA=\");\n\n_c = ToDoListCmp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListCmp\");","map":{"version":3,"sources":["C:/Users/liron/Desktop/FullStack/Training/todo_list_training/ToDo_List_testing/Client/src/Cmps/ToDoList/ToDoListCmp.jsx"],"names":["React","initial_data","Column_cmp","DragDropContext","useState","useEffect","ToolBar","Requests","ToDoListCmp","state","setState","tasks_list","setTasksList","data_user","JSON","parse","localStorage","getItem","user_id","user_name","tasks_list_useEffect","get_task_list","then","res","data","console","log","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskId","Array","from","taskIds","splice","newColumn","newState","id","startTaskIds","newStart","finshTaskIds","newFinsh","columnOder","map","column_id","column","tasks","task_id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport initial_data from \"../../initialData\";\r\nimport Column_cmp from \"./Column_cmp\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ToolBar from \"./ToolBar\";\r\nimport Requests from \"../../Functions/Requests\";\r\n\r\nexport default function ToDoListCmp() {\r\n  const [state, setState] = useState(initial_data);\r\n  const [tasks_list, setTasksList] = useState();\r\n\r\n  let data_user = JSON.parse(localStorage.getItem(\"data_user\"));\r\n  const user_id = data_user[\"user_id\"];\r\n  const user_name = data_user[\"user_name\"];\r\n\r\n  useEffect(() => {\r\n    async function tasks_list_useEffect() {\r\n      Requests.get_task_list(user_id).then((res) => {\r\n        setTasksList(res.data.tasks_list);\r\n      });\r\n    }\r\n    tasks_list_useEffect();\r\n  }, []);\r\n\r\n  console.log(tasks_list);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = state.columns[source.droppableId];\r\n    const finish = state.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newTaskId = Array.from(start.taskIds);\r\n\r\n      newTaskId.splice(source.index, 1);\r\n      newTaskId.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newTaskId,\r\n      };\r\n\r\n      const newState = {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [newColumn.id]: newColumn,\r\n        },\r\n      };\r\n      setState(newState);\r\n      return;\r\n    }\r\n\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds,\r\n    };\r\n\r\n    const finshTaskIds = Array.from(finish.taskIds);\r\n    finshTaskIds.splice(destination.index, 0, draggableId);\r\n    const newFinsh = {\r\n      ...finish,\r\n      taskIds: finshTaskIds,\r\n    };\r\n\r\n    const newState = {\r\n      ...state,\r\n      columns: {\r\n        ...state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinsh.id]: newFinsh,\r\n      },\r\n    };\r\n    setState(newState);\r\n    return;\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <ToolBar user_name={user_name} />\r\n      {state.columnOder.map((column_id) => {\r\n        const column = state.columns[column_id],\r\n          tasks = column.taskIds.map((task_id) => state.tasks[task_id]);\r\n        return <Column_cmp key={column.id} column={column} tasks={tasks} />;\r\n      })}\r\n    </DragDropContext>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}