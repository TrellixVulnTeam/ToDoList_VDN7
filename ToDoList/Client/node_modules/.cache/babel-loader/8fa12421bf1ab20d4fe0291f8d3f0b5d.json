{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\liron\\\\Desktop\\\\FullStack\\\\Training\\\\todo_list_training\\\\ToDo_List_testing\\\\Client\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initial_data from \"./initialData\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Column_cmp from \"./Cmps/Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // class App extends React.Component {\n// state = initial_data;\n// onDragEnd = (result) => {\n//   const { destination, source, draggableId } = result;\n//   if (!destination) {\n//     return;\n//   }\n//   if (\n//     destination.droppableId === source.droppableId &&\n//     destination.index === source.index\n//   ) {\n//     return;\n//   }\n//   const start = this.state.columns[source.droppableId];\n//   const finish = this.state.columns[destination.droppableId];\n//   if (start === finish) {\n//     const newTaskId = Array.from(start.taskIds);\n//     newTaskId.splice(source.index, 1);\n//     newTaskId.splice(destination.index, 0, draggableId);\n//     const newColumn = {\n//       ...start,\n//       taskIds: newTaskId,\n//     };\n//     const newState = {\n//       ...this.state,\n//       columns: {\n//         ...this.state.columns,\n//         [newColumn.id]: newColumn,\n//       },\n//     };\n//     this.setState(newState);\n//     return;\n//   }\n//   const startTaskIds = Array.from(start.taskIds);\n//   startTaskIds.splice(source.index, 1);\n//   const newStart = {\n//     ...start,\n//     taskIds: startTaskIds,\n//   };\n//   const finshTaskIds = Array.from(finish.taskIds);\n//   finshTaskIds.splice(destination.index, 0, draggableId);\n//   const newFinsh = {\n//     ...finish,\n//     taskIds: finshTaskIds,\n//   };\n//   const newState = {\n//     ...this.state,\n//     columns: {\n//       ...this.state.columns,\n//       [newStart.id]: newStart,\n//       [newFinsh.id]: newFinsh,\n//     },\n//   };\n//   this.setState(newState);\n//   return;\n// };\n//   render() {\n//     return (\n//       <DragDropContext onDragEnd={this.onDragEnd}>\n//         {this.state.columnOder.map((column_id) => {\n//           const column = this.state.columns[column_id],\n//             tasks = column.taskIds.map((task_id) => this.state.tasks[task_id]);\n//           return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n//         })}\n//       </DragDropContext>\n//     );\n//   }\n// }\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n// reportWebVitals();\n// import React from 'react'\n\nexport default function App() {\n  const state = initial_data;\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n      const newColumn = { ...start,\n        taskIds: newTaskId\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = { ...start,\n      taskIds: startTaskIds\n    };\n    const finshTaskIds = Array.from(finish.taskIds);\n    finshTaskIds.splice(destination.index, 0, draggableId);\n    const newFinsh = { ...finish,\n      taskIds: finshTaskIds\n    };\n    const newState = { ...this.state,\n      columns: { ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinsh.id]: newFinsh\n      }\n    };\n    this.setState(newState);\n    return;\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: this.state.columnOder.map(column_id => {\n      const column = this.state.columns[column_id],\n            tasks = column.taskIds.map(task_id => this.state.tasks[task_id]);\n      return /*#__PURE__*/_jsxDEV(Column_cmp, {\n        column: column,\n        tasks: tasks\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 14\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 12\n  }, this);\n}\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 177,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/liron/Desktop/FullStack/Training/todo_list_training/ToDo_List_testing/Client/src/index.js"],"names":["React","ReactDOM","initial_data","reportWebVitals","Column_cmp","DragDropContext","App","state","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskId","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finshTaskIds","newFinsh","columnOder","map","column_id","column","tasks","task_id","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initial_data from \"./initialData\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Column_cmp from \"./Cmps/Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\n// class App extends React.Component {\n  // state = initial_data;\n  // onDragEnd = (result) => {\n  //   const { destination, source, draggableId } = result;\n\n  //   if (!destination) {\n  //     return;\n  //   }\n\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return;\n  //   }\n\n  //   const start = this.state.columns[source.droppableId];\n  //   const finish = this.state.columns[destination.droppableId];\n\n  //   if (start === finish) {\n  //     const newTaskId = Array.from(start.taskIds);\n\n  //     newTaskId.splice(source.index, 1);\n  //     newTaskId.splice(destination.index, 0, draggableId);\n\n  //     const newColumn = {\n  //       ...start,\n  //       taskIds: newTaskId,\n  //     };\n\n  //     const newState = {\n  //       ...this.state,\n  //       columns: {\n  //         ...this.state.columns,\n  //         [newColumn.id]: newColumn,\n  //       },\n  //     };\n  //     this.setState(newState);\n  //     return;\n  //   }\n\n  //   const startTaskIds = Array.from(start.taskIds);\n  //   startTaskIds.splice(source.index, 1);\n  //   const newStart = {\n  //     ...start,\n  //     taskIds: startTaskIds,\n  //   };\n\n  //   const finshTaskIds = Array.from(finish.taskIds);\n  //   finshTaskIds.splice(destination.index, 0, draggableId);\n  //   const newFinsh = {\n  //     ...finish,\n  //     taskIds: finshTaskIds,\n  //   };\n\n  //   const newState = {\n  //     ...this.state,\n  //     columns: {\n  //       ...this.state.columns,\n  //       [newStart.id]: newStart,\n  //       [newFinsh.id]: newFinsh,\n  //     },\n  //   };\n  //   this.setState(newState);\n  //   return;\n  // };\n\n//   render() {\n//     return (\n//       <DragDropContext onDragEnd={this.onDragEnd}>\n//         {this.state.columnOder.map((column_id) => {\n//           const column = this.state.columns[column_id],\n//             tasks = column.taskIds.map((task_id) => this.state.tasks[task_id]);\n//           return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n//         })}\n//       </DragDropContext>\n//     );\n//   }\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// reportWebVitals();\n\n// import React from 'react'\n\nexport default function App() {\n  const state = initial_data;\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskId,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finshTaskIds = Array.from(finish.taskIds);\n    finshTaskIds.splice(destination.index, 0, draggableId);\n    const newFinsh = {\n      ...finish,\n      taskIds: finshTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinsh.id]: newFinsh,\n      },\n    };\n    this.setState(newState);\n    return;\n  };\n\n  return ( <DragDropContext onDragEnd={onDragEnd}>\n    {this.state.columnOder.map((column_id) => {\n      const column = this.state.columns[column_id],\n        tasks = column.taskIds.map((task_id) => this.state.tasks[task_id]);\n      return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n    })}\n  </DragDropContext>)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();"]},"metadata":{},"sourceType":"module"}