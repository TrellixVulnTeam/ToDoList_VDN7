{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\liron\\\\Desktop\\\\FullStack\\\\Training\\\\todo_list_training\\\\ToDo_List_testing\\\\Client\\\\src\\\\Cmps\\\\ToDoList\\\\ToDoListCmp.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport initial_data from \"../../initialData\";\nimport Column_cmp from \"./Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\nimport ToolBar from \"./ToolBar\";\nimport Requests from \"../../Functions/Requests\";\nimport ColumnCmp from \"./ColumnCmp\";\nimport CreateTask from \"./CreateTask\";\nexport default function ToDoListCmp() {\n  _s();\n\n  const [tasks_list, setTasksList] = useState();\n  const [openCreateTask, setOpenCreateTask] = useState(false);\n  let data_user = JSON.parse(localStorage.getItem(\"data_user\"));\n  const user_id = data_user[\"user_id\"];\n  const user_name = data_user[\"user_name\"];\n  useEffect(() => {\n    async function tasks_list_useEffect() {\n      Requests.get_task_list(user_id).then(res => {\n        setTasksList(res.data.tasks_list);\n      });\n    }\n\n    tasks_list_useEffect();\n  }, []);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    console.log(\"result\", result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId == source.droppableId && destination.index == source.index) {\n      return;\n    }\n\n    const start = source.droppableId;\n    const finish = destination.droppableId;\n    console.log(\"start\", source.droppableId, \"finish\", destination.droppableId);\n\n    if (start === finish) {\n      console.log(\"result\", result);\n      console.log('e', destination.index);\n      console.log('s', source.index); // source\n\n      let new_tasks_list = tasks_list.filter(task => task.status === start);\n      new_tasks_list[source.index];\n      new_tasks_list.splice(fromIndex, 1);\n      new_tasks_list.splice(fromIndex, 1); //   function arraymove(arr, fromIndex, toIndex) {\n      //     var element = arr[fromIndex];\n      //     arr.splice(fromIndex, 1);\n      //     arr.splice(toIndex, 0, element);\n      // }\n      // const new_list =\n      // console.log('', );\n      // const newTaskId = Array.from(start.taskIds);\n      // newTaskId.splice(source.index, 1);\n      // newTaskId.splice(destination.index, 0, draggableId);\n      // const newColumn = {\n      //   ...start,\n      //   taskIds: newTaskId,\n    } //   const newState = {\n    //     ...state,\n    //     columns: {\n    //       ...state.columns,\n    //       [newColumn.id]: newColumn,\n    //     },\n    //   };\n    //   setState(newState);\n    //   return;\n    // }\n    // const startTaskIds = Array.from(start.taskIds);\n    // startTaskIds.splice(source.index, 1);\n    // const newStart = {\n    //   ...start,\n    //   taskIds: startTaskIds,\n    // };\n    // const finshTaskIds = Array.from(finish.taskIds);\n    // finshTaskIds.splice(destination.index, 0, draggableId);\n    // const newFinsh = {\n    //   ...finish,\n    //   taskIds: finshTaskIds,\n    // };\n    // const newState = {\n    //   ...state,\n    //   columns: {\n    //     ...state.columns,\n    //     [newStart.id]: newStart,\n    //     [newFinsh.id]: newFinsh,\n    //   },\n    // };\n    // setState(newState);\n    // return;\n\n  };\n\n  let data_cmp = [{\n    title: \"TODO\",\n    status: \"todo\"\n  }, {\n    title: \"IN PROGERESS\",\n    status: \"in_pragress\"\n  }, {\n    title: \"DONE\",\n    status: \"done\"\n  }];\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(ToolBar, {\n      user_name: user_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), openCreateTask ? /*#__PURE__*/_jsxDEV(CreateTask, {\n      state_function: {\n        setTasksList: setTasksList,\n        setOpenCreateTask: setOpenCreateTask\n      },\n      user_id: user_id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setOpenCreateTask(true);\n      },\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pro\",\n      children: data_cmp.map((data_column, index) => /*#__PURE__*/_jsxDEV(ColumnCmp, {\n        delete: async task_id => {\n          Requests.delete_task(task_id);\n          let new_tasks_list = tasks_list.filter(task => task.task_id !== task_id);\n          setTasksList(new_tasks_list);\n        },\n        move: (task_id, status_task) => {\n          Requests.post_value(\"/move\", {\n            task_id: task_id,\n            status_task: status_task\n          }).then(res => {\n            const task_found = tasks_list.find(task => task.task_id === task_id);\n            task_found.status = res.data.move_to_status;\n            setTasksList(task_found => [...task_found]);\n          });\n        },\n        class_name: data_column.status,\n        title: data_column.title,\n        number: index,\n        tasks_list: tasks_list ? tasks_list.filter(task => task.status === data_column.status) : \"\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToDoListCmp, \"wR9RWXPxSp95zzzCEm1+SgzGDgY=\");\n\n_c = ToDoListCmp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListCmp\");","map":{"version":3,"sources":["C:/Users/liron/Desktop/FullStack/Training/todo_list_training/ToDo_List_testing/Client/src/Cmps/ToDoList/ToDoListCmp.jsx"],"names":["React","initial_data","Column_cmp","DragDropContext","useState","useEffect","ToolBar","Requests","ColumnCmp","CreateTask","ToDoListCmp","tasks_list","setTasksList","openCreateTask","setOpenCreateTask","data_user","JSON","parse","localStorage","getItem","user_id","user_name","tasks_list_useEffect","get_task_list","then","res","data","onDragEnd","result","destination","source","draggableId","console","log","droppableId","index","start","finish","new_tasks_list","filter","task","status","splice","fromIndex","data_cmp","title","map","data_column","task_id","delete_task","status_task","post_value","task_found","find","move_to_status"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BR,QAAQ,EAA3C;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AAEA,MAAIW,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAhB;AACA,QAAMC,OAAO,GAAGL,SAAS,CAAC,SAAD,CAAzB;AACA,QAAMM,SAAS,GAAGN,SAAS,CAAC,WAAD,CAA3B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeiB,oBAAf,GAAsC;AACpCf,MAAAA,QAAQ,CAACgB,aAAT,CAAuBH,OAAvB,EAAgCI,IAAhC,CAAsCC,GAAD,IAAS;AAC5Cb,QAAAA,YAAY,CAACa,GAAG,CAACC,IAAJ,CAASf,UAAV,CAAZ;AACD,OAFD;AAGD;;AACDW,IAAAA,oBAAoB;AACrB,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMK,SAAS,GAAIC,MAAD,IAAY;AAC5B,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,QAAuCH,MAA7C;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,MAAtB;;AAEA,QAAI,CAACC,WAAL,EAAkB;AAChB;AACD;;AAED,QACEA,WAAW,CAACK,WAAZ,IAA2BJ,MAAM,CAACI,WAAlC,IACAL,WAAW,CAACM,KAAZ,IAAqBL,MAAM,CAACK,KAF9B,EAGE;AACA;AACD;;AAED,UAAMC,KAAK,GAAGN,MAAM,CAACI,WAArB;AACA,UAAMG,MAAM,GAAGR,WAAW,CAACK,WAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,MAAM,CAACI,WAA5B,EAAyC,QAAzC,EAAmDL,WAAW,CAACK,WAA/D;;AAEA,QAAIE,KAAK,KAAKC,MAAd,EAAsB;AACpBL,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,MAAtB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBJ,WAAW,CAACM,KAA5B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBH,MAAM,CAACK,KAAvB,EAHoB,CAIpB;;AACA,UAAIG,cAAc,GAAG3B,UAAU,CAAC4B,MAAX,CAClBC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBL,KADP,CAArB;AAKAE,MAAAA,cAAc,CAACR,MAAM,CAACK,KAAR,CAAd;AACAG,MAAAA,cAAc,CAACI,MAAf,CAAsBC,SAAtB,EAAiC,CAAjC;AACAL,MAAAA,cAAc,CAACI,MAAf,CAAsBC,SAAtB,EAAiC,CAAjC,EAZoB,CAgBtB;AACA;AACA;AACA;AACA;AAME;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACD,KAvD2B,CAyD5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GA5FD;;AA8FA,MAAIC,QAAQ,GAAG,CACb;AAAEC,IAAAA,KAAK,EAAE,MAAT;AAAiBJ,IAAAA,MAAM,EAAE;AAAzB,GADa,EAEb;AACEI,IAAAA,KAAK,EAAE,cADT;AAEEJ,IAAAA,MAAM,EAAE;AAFV,GAFa,EAMb;AAAEI,IAAAA,KAAK,EAAE,MAAT;AAAiBJ,IAAAA,MAAM,EAAE;AAAzB,GANa,CAAf;AASA,sBACE,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEd,SAA5B;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAEN;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGR,cAAc,gBACb,QAAC,UAAD;AACE,MAAA,cAAc,EAAE;AACdD,QAAAA,YAAY,EAAEA,YADA;AAEdE,QAAAA,iBAAiB,EAAEA;AAFL,OADlB;AAKE,MAAA,OAAO,EAAEM;AALX;AAAA;AAAA;AAAA;AAAA,YADa,GASb,EAXJ,eAaE;AACE,MAAA,OAAO,EAAE,MAAM;AACbN,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAqBE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACG8B,QAAQ,CAACE,GAAT,CAAa,CAACC,WAAD,EAAcZ,KAAd,kBACZ,QAAC,SAAD;AACE,QAAA,MAAM,EAAE,MAAOa,OAAP,IAAmB;AACzBzC,UAAAA,QAAQ,CAAC0C,WAAT,CAAqBD,OAArB;AACA,cAAIV,cAAc,GAAG3B,UAAU,CAAC4B,MAAX,CAClBC,IAAD,IAAUA,IAAI,CAACQ,OAAL,KAAiBA,OADR,CAArB;AAGApC,UAAAA,YAAY,CAAC0B,cAAD,CAAZ;AACD,SAPH;AAQE,QAAA,IAAI,EAAE,CAACU,OAAD,EAAUE,WAAV,KAA0B;AAC9B3C,UAAAA,QAAQ,CAAC4C,UAAT,CAAoB,OAApB,EAA6B;AAC3BH,YAAAA,OAAO,EAAEA,OADkB;AAE3BE,YAAAA,WAAW,EAAEA;AAFc,WAA7B,EAGG1B,IAHH,CAGSC,GAAD,IAAS;AACf,kBAAM2B,UAAU,GAAGzC,UAAU,CAAC0C,IAAX,CAChBb,IAAD,IAAUA,IAAI,CAACQ,OAAL,KAAiBA,OADV,CAAnB;AAGAI,YAAAA,UAAU,CAACX,MAAX,GAAoBhB,GAAG,CAACC,IAAJ,CAAS4B,cAA7B;AACA1C,YAAAA,YAAY,CAAEwC,UAAD,IAAgB,CAAC,GAAGA,UAAJ,CAAjB,CAAZ;AACD,WATD;AAUD,SAnBH;AAoBE,QAAA,UAAU,EAAEL,WAAW,CAACN,MApB1B;AAqBE,QAAA,KAAK,EAAEM,WAAW,CAACF,KArBrB;AAuBE,QAAA,MAAM,EAAEV,KAvBV;AAwBE,QAAA,UAAU,EACRxB,UAAU,GACNA,UAAU,CAAC4B,MAAX,CACGC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBM,WAAW,CAACN,MADxC,CADM,GAIN;AA7BR,SAsBON,KAtBP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4DD;;GApLuBzB,W;;KAAAA,W","sourcesContent":["import React from \"react\";\r\nimport initial_data from \"../../initialData\";\r\nimport Column_cmp from \"./Column_cmp\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ToolBar from \"./ToolBar\";\r\nimport Requests from \"../../Functions/Requests\";\r\nimport ColumnCmp from \"./ColumnCmp\";\r\nimport CreateTask from \"./CreateTask\";\r\n\r\nexport default function ToDoListCmp() {\r\n  const [tasks_list, setTasksList] = useState();\r\n  const [openCreateTask, setOpenCreateTask] = useState(false);\r\n\r\n  let data_user = JSON.parse(localStorage.getItem(\"data_user\"));\r\n  const user_id = data_user[\"user_id\"];\r\n  const user_name = data_user[\"user_name\"];\r\n\r\n  useEffect(() => {\r\n    async function tasks_list_useEffect() {\r\n      Requests.get_task_list(user_id).then((res) => {\r\n        setTasksList(res.data.tasks_list);\r\n      });\r\n    }\r\n    tasks_list_useEffect();\r\n  }, []);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n    console.log(\"result\", result);\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId == source.droppableId &&\r\n      destination.index == source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = source.droppableId;\r\n    const finish = destination.droppableId;\r\n    console.log(\"start\", source.droppableId, \"finish\", destination.droppableId);\r\n\r\n    if (start === finish) {\r\n      console.log(\"result\", result);\r\n      console.log('e',destination.index);\r\n      console.log('s',source.index);\r\n      // source\r\n      let new_tasks_list = tasks_list.filter(\r\n        (task) => task.status === start\r\n      )\r\n      \r\n\r\n      new_tasks_list[source.index]\r\n      new_tasks_list.splice(fromIndex, 1)\r\n      new_tasks_list.splice(fromIndex, 1)\r\n\r\n\r\n\r\n    //   function arraymove(arr, fromIndex, toIndex) {\r\n    //     var element = arr[fromIndex];\r\n    //     arr.splice(fromIndex, 1);\r\n    //     arr.splice(toIndex, 0, element);\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n      // const new_list =\r\n      // console.log('', );\r\n      // const newTaskId = Array.from(start.taskIds);\r\n\r\n      // newTaskId.splice(source.index, 1);\r\n      // newTaskId.splice(destination.index, 0, draggableId);\r\n\r\n      // const newColumn = {\r\n      //   ...start,\r\n      //   taskIds: newTaskId,\r\n    }\r\n\r\n    //   const newState = {\r\n    //     ...state,\r\n    //     columns: {\r\n    //       ...state.columns,\r\n    //       [newColumn.id]: newColumn,\r\n    //     },\r\n    //   };\r\n    //   setState(newState);\r\n    //   return;\r\n    // }\r\n\r\n    // const startTaskIds = Array.from(start.taskIds);\r\n    // startTaskIds.splice(source.index, 1);\r\n    // const newStart = {\r\n    //   ...start,\r\n    //   taskIds: startTaskIds,\r\n    // };\r\n\r\n    // const finshTaskIds = Array.from(finish.taskIds);\r\n    // finshTaskIds.splice(destination.index, 0, draggableId);\r\n    // const newFinsh = {\r\n    //   ...finish,\r\n    //   taskIds: finshTaskIds,\r\n    // };\r\n\r\n    // const newState = {\r\n    //   ...state,\r\n    //   columns: {\r\n    //     ...state.columns,\r\n    //     [newStart.id]: newStart,\r\n    //     [newFinsh.id]: newFinsh,\r\n    //   },\r\n    // };\r\n    // setState(newState);\r\n    // return;\r\n  };\r\n\r\n  let data_cmp = [\r\n    { title: \"TODO\", status: \"todo\" },\r\n    {\r\n      title: \"IN PROGERESS\",\r\n      status: \"in_pragress\",\r\n    },\r\n    { title: \"DONE\", status: \"done\" },\r\n  ];\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <ToolBar user_name={user_name} />\r\n      {openCreateTask ? (\r\n        <CreateTask\r\n          state_function={{\r\n            setTasksList: setTasksList,\r\n            setOpenCreateTask: setOpenCreateTask,\r\n          }}\r\n          user_id={user_id}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <button\r\n        onClick={() => {\r\n          setOpenCreateTask(true);\r\n        }}\r\n      >\r\n        add\r\n      </button>\r\n\r\n      <div className=\"pro\">\r\n        {data_cmp.map((data_column, index) => (\r\n          <ColumnCmp\r\n            delete={async (task_id) => {\r\n              Requests.delete_task(task_id);\r\n              let new_tasks_list = tasks_list.filter(\r\n                (task) => task.task_id !== task_id\r\n              );\r\n              setTasksList(new_tasks_list);\r\n            }}\r\n            move={(task_id, status_task) => {\r\n              Requests.post_value(\"/move\", {\r\n                task_id: task_id,\r\n                status_task: status_task,\r\n              }).then((res) => {\r\n                const task_found = tasks_list.find(\r\n                  (task) => task.task_id === task_id\r\n                );\r\n                task_found.status = res.data.move_to_status;\r\n                setTasksList((task_found) => [...task_found]);\r\n              });\r\n            }}\r\n            class_name={data_column.status}\r\n            title={data_column.title}\r\n            key={index}\r\n            number={index}\r\n            tasks_list={\r\n              tasks_list\r\n                ? tasks_list.filter(\r\n                    (task) => task.status === data_column.status\r\n                  )\r\n                : \"\"\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}