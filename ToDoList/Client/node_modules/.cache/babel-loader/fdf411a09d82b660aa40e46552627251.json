{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\liron\\\\Desktop\\\\FullStack\\\\Training\\\\todo_list_training\\\\ToDo_List_testing\\\\Client\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initial_data from \"./initialData\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Column_cmp from \"./Cmps/Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\"; // class App extends React.Component {\n// state = initial_data;\n// onDragEnd = (result) => {\n//   const { destination, source, draggableId } = result;\n//   if (!destination) {\n//     return;\n//   }\n//   if (\n//     destination.droppableId === source.droppableId &&\n//     destination.index === source.index\n//   ) {\n//     return;\n//   }\n//   const start = this.state.columns[source.droppableId];\n//   const finish = this.state.columns[destination.droppableId];\n//   if (start === finish) {\n//     const newTaskId = Array.from(start.taskIds);\n//     newTaskId.splice(source.index, 1);\n//     newTaskId.splice(destination.index, 0, draggableId);\n//     const newColumn = {\n//       ...start,\n//       taskIds: newTaskId,\n//     };\n//     const newState = {\n//       ...this.state,\n//       columns: {\n//         ...this.state.columns,\n//         [newColumn.id]: newColumn,\n//       },\n//     };\n//     this.setState(newState);\n//     return;\n//   }\n//   const startTaskIds = Array.from(start.taskIds);\n//   startTaskIds.splice(source.index, 1);\n//   const newStart = {\n//     ...start,\n//     taskIds: startTaskIds,\n//   };\n//   const finshTaskIds = Array.from(finish.taskIds);\n//   finshTaskIds.splice(destination.index, 0, draggableId);\n//   const newFinsh = {\n//     ...finish,\n//     taskIds: finshTaskIds,\n//   };\n//   const newState = {\n//     ...this.state,\n//     columns: {\n//       ...this.state.columns,\n//       [newStart.id]: newStart,\n//       [newFinsh.id]: newFinsh,\n//     },\n//   };\n//   this.setState(newState);\n//   return;\n// };\n//   render() {\n//     return (\n//       <DragDropContext onDragEnd={this.onDragEnd}>\n//         {this.state.columnOder.map((column_id) => {\n//           const column = this.state.columns[column_id],\n//             tasks = column.taskIds.map((task_id) => this.state.tasks[task_id]);\n//           return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n//         })}\n//       </DragDropContext>\n//     );\n//   }\n// }\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n// reportWebVitals();\n// import React from 'react'\n\nexport default function App() {\n  _s();\n\n  const [tasks_list, setTasksList] = useState(null);\n  const [openCreateTask, setOpenCreateTask] = useState(false); // const [state,setState] = useState[initial_data]\n  // console.log(state);\n  // const state = initial_data;\n  // const onDragEnd = (result) => {\n  //   const { destination, source, draggableId } = result;\n  //   if (!destination) {\n  //     return;\n  //   }\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return;\n  //   }\n  //   const start = state.columns[source.droppableId];\n  //   const finish = state.columns[destination.droppableId];\n  //   if (start === finish) {\n  //     const newTaskId = Array.from(start.taskIds);\n  //     newTaskId.splice(source.index, 1);\n  //     newTaskId.splice(destination.index, 0, draggableId);\n  //     const newColumn = {\n  //       ...start,\n  //       taskIds: newTaskId,\n  //     };\n  //     const newState = {\n  //       ...state,\n  //       columns: {\n  //         ...state.columns,\n  //         [newColumn.id]: newColumn,\n  //       },\n  //     };\n  //     this.setState(newState);\n  //     return;\n  //   }\n  //   const startTaskIds = Array.from(start.taskIds);\n  //   startTaskIds.splice(source.index, 1);\n  //   const newStart = {\n  //     ...start,\n  //     taskIds: startTaskIds,\n  //   };\n  //   const finshTaskIds = Array.from(finish.taskIds);\n  //   finshTaskIds.splice(destination.index, 0, draggableId);\n  //   const newFinsh = {\n  //     ...finish,\n  //     taskIds: finshTaskIds,\n  //   };\n  //   const newState = {\n  //     ...state,\n  //     columns: {\n  //       ...state.columns,\n  //       [newStart.id]: newStart,\n  //       [newFinsh.id]: newFinsh,\n  //     },\n  //   };\n  //   this.setState(newState);\n  //   return;\n  // };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: state.columnOder.map(column_id => {\n      const column = state.columns[column_id],\n            tasks = column.taskIds.map(task_id => state.tasks[task_id]);\n      return /*#__PURE__*/_jsxDEV(Column_cmp, {\n        column: column,\n        tasks: tasks\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 14\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 12\n  }, this);\n}\n\n_s(App, \"F6WLB6sk240BuKWcR9uIqkbEemY=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 189,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/liron/Desktop/FullStack/Training/todo_list_training/ToDo_List_testing/Client/src/index.js"],"names":["React","ReactDOM","initial_data","reportWebVitals","Column_cmp","DragDropContext","useState","useEffect","App","tasks_list","setTasksList","openCreateTask","setOpenCreateTask","onDragEnd","state","columnOder","map","column_id","column","columns","tasks","taskIds","task_id","id","render","document","getElementById"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;AACE;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BJ,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD,CAF4B,CAK5B;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBAAS,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEO,SAA5B;AAAA,cACNC,KAAK,CAACC,UAAN,CAAiBC,GAAjB,CAAsBC,SAAD,IAAe;AACnC,YAAMC,MAAM,GAAGJ,KAAK,CAACK,OAAN,CAAcF,SAAd,CAAf;AAAA,YACEG,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeL,GAAf,CAAoBM,OAAD,IAAaR,KAAK,CAACM,KAAN,CAAYE,OAAZ,CAAhC,CADV;AAEA,0BAAO,QAAC,UAAD;AAA4B,QAAA,MAAM,EAAEJ,MAApC;AAA4C,QAAA,KAAK,EAAEE;AAAnD,SAAiBF,MAAM,CAACK,EAAxB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAJA;AADM;AAAA;AAAA;AAAA;AAAA,UAAT;AAOD;;GArFuBf,G;;KAAAA,G;AAuFxBP,QAAQ,CAACuB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF;AAOAvB,eAAe","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initial_data from \"./initialData\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Column_cmp from \"./Cmps/Column_cmp\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useState, useEffect } from \"react\";\n\n// class App extends React.Component {\n  // state = initial_data;\n  // onDragEnd = (result) => {\n  //   const { destination, source, draggableId } = result;\n\n  //   if (!destination) {\n  //     return;\n  //   }\n\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return;\n  //   }\n\n  //   const start = this.state.columns[source.droppableId];\n  //   const finish = this.state.columns[destination.droppableId];\n\n  //   if (start === finish) {\n  //     const newTaskId = Array.from(start.taskIds);\n\n  //     newTaskId.splice(source.index, 1);\n  //     newTaskId.splice(destination.index, 0, draggableId);\n\n  //     const newColumn = {\n  //       ...start,\n  //       taskIds: newTaskId,\n  //     };\n\n  //     const newState = {\n  //       ...this.state,\n  //       columns: {\n  //         ...this.state.columns,\n  //         [newColumn.id]: newColumn,\n  //       },\n  //     };\n  //     this.setState(newState);\n  //     return;\n  //   }\n\n  //   const startTaskIds = Array.from(start.taskIds);\n  //   startTaskIds.splice(source.index, 1);\n  //   const newStart = {\n  //     ...start,\n  //     taskIds: startTaskIds,\n  //   };\n\n  //   const finshTaskIds = Array.from(finish.taskIds);\n  //   finshTaskIds.splice(destination.index, 0, draggableId);\n  //   const newFinsh = {\n  //     ...finish,\n  //     taskIds: finshTaskIds,\n  //   };\n\n  //   const newState = {\n  //     ...this.state,\n  //     columns: {\n  //       ...this.state.columns,\n  //       [newStart.id]: newStart,\n  //       [newFinsh.id]: newFinsh,\n  //     },\n  //   };\n  //   this.setState(newState);\n  //   return;\n  // };\n\n//   render() {\n//     return (\n//       <DragDropContext onDragEnd={this.onDragEnd}>\n//         {this.state.columnOder.map((column_id) => {\n//           const column = this.state.columns[column_id],\n//             tasks = column.taskIds.map((task_id) => this.state.tasks[task_id]);\n//           return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n//         })}\n//       </DragDropContext>\n//     );\n//   }\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// reportWebVitals();\n\n// import React from 'react'\n\nexport default function App() {\n  const [tasks_list, setTasksList] = useState(null);\n  const [openCreateTask, setOpenCreateTask] = useState(false);\n\n\n  // const [state,setState] = useState[initial_data]\n  // console.log(state);\n\n\n\n  // const state = initial_data;\n  // const onDragEnd = (result) => {\n  //   const { destination, source, draggableId } = result;\n    \n\n  //   if (!destination) {\n  //     return;\n  //   }\n\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return;\n  //   }\n\n  //   const start = state.columns[source.droppableId];\n  //   const finish = state.columns[destination.droppableId];\n\n  //   if (start === finish) {\n  //     const newTaskId = Array.from(start.taskIds);\n\n  //     newTaskId.splice(source.index, 1);\n  //     newTaskId.splice(destination.index, 0, draggableId);\n\n  //     const newColumn = {\n  //       ...start,\n  //       taskIds: newTaskId,\n  //     };\n\n  //     const newState = {\n  //       ...state,\n  //       columns: {\n  //         ...state.columns,\n  //         [newColumn.id]: newColumn,\n  //       },\n  //     };\n  //     this.setState(newState);\n  //     return;\n  //   }\n\n  //   const startTaskIds = Array.from(start.taskIds);\n  //   startTaskIds.splice(source.index, 1);\n  //   const newStart = {\n  //     ...start,\n  //     taskIds: startTaskIds,\n  //   };\n\n  //   const finshTaskIds = Array.from(finish.taskIds);\n  //   finshTaskIds.splice(destination.index, 0, draggableId);\n  //   const newFinsh = {\n  //     ...finish,\n  //     taskIds: finshTaskIds,\n  //   };\n\n  //   const newState = {\n  //     ...state,\n  //     columns: {\n  //       ...state.columns,\n  //       [newStart.id]: newStart,\n  //       [newFinsh.id]: newFinsh,\n  //     },\n  //   };\n  //   this.setState(newState);\n  //   return;\n  // };\n\n\n  return ( <DragDropContext onDragEnd={onDragEnd}>\n    {state.columnOder.map((column_id) => {\n      const column = state.columns[column_id],\n        tasks = column.taskIds.map((task_id) => state.tasks[task_id]);\n      return <Column_cmp key={column.id} column={column} tasks={tasks} />;\n    })}\n  </DragDropContext>)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();"]},"metadata":{},"sourceType":"module"}